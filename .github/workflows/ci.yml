name: Backend CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Node.js (choose the version you want, here it's '14')
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      # Check Node.js version
      - name: Check Node.js version
        run: node -v

      # Cache node_modules (using actions/cache@v3)
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      # Install dependencies
      - name: Install dependencies
        run: |
          npm install

      # Set environment variables from GitHub secrets
      - name: Set environment variables from GitHub secrets
        run: |
          echo "PORT=${{ secrets.PORT }}" >> $GITHUB_ENV
          echo "SQL_SERVER=${{ secrets.SQL_SERVER }}" >> $GITHUB_ENV
          echo "SQL_DATABASE=${{ secrets.SQL_DATABASE }}" >> $GITHUB_ENV
          echo "SQL_USER=${{ secrets.SQL_USER }}" >> $GITHUB_ENV
          echo "SQL_PASSWORD=${{ secrets.SQL_PASSWORD }}" >> $GITHUB_ENV
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> $GITHUB_ENV

      # Set up Babel for Jest transformation
      - name: Set up Babel
        run: |
          npm install --save-dev @babel/core @babel/preset-env babel-jest

      # Configure Jest to use Babel
      - name: Configure Jest
        run: |
          echo "module.exports = { transform: { '^.+\\.js$': 'babel-jest' }, transformIgnorePatterns: ['/node_modules/(?!tedious)/'] };" > jest.config.js

      # Run backend tests
      - name: Run backend tests
        run: npm test
